---

- name: Install Open vSwitch packages (Ubuntu)
  ansible.builtin.package:
    name:
      - openvswitch-switch
      - openvswitch-common
    state: present
  when: ansible_os_family == "Debian"

- name: Start and enable OVS service (Ubuntu)
  ansible.builtin.systemd:
    name: openvswitch-switch
    state: started
    enabled: true
  when: ansible_os_family == "Debian"

- name: Wait for OVS to be ready
  ansible.builtin.wait_for:
    path: /var/run/openvswitch/db.sock
    timeout: 30

- name: Configure OVS integration bridge
  openvswitch.openvswitch.openvswitch_bridge:
    bridge: br-int
    state: present

- name: Set bridge datapath type
  openvswitch.openvswitch.openvswitch_db:
    table: Bridge
    record: br-int
    col: datapath_type
    value: system

- name: Add network interface to OVS bridge (if configured)
  openvswitch.openvswitch.openvswitch_port:
    bridge: br-int
    port: "{{ nsx_ovs_uplink_port | default(ansible_default_ipv4.interface) }}"
    state: present
  when: nsx_add_uplink_to_ovs | default(false)

- name: Install NSX node agent prerequisites
  ansible.builtin.package:
    name:
      - python3-requests
      - python3-netaddr
    state: present

- name: Create NSX directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /etc/nsx-certs
    - /var/log/nsx-ujo
    - /opt/cni/bin

- name: Copy NSX CA certificate
  ansible.builtin.copy:
    content: "{{ nsx_ca_cert_content }}"
    dest: /etc/nsx-certs/ca.crt
    mode: '0644'
  when: nsx_ca_cert_content is defined

- name: Copy NSX client certificate
  ansible.builtin.copy:
    content: "{{ nsx_client_cert_content }}"
    dest: /etc/nsx-certs/client.crt
    mode: '0644'
  when: nsx_client_cert_content is defined

- name: Copy NSX client key
  ansible.builtin.copy:
    content: "{{ nsx_client_key_content }}"
    dest: /etc/nsx-certs/client.key
    mode: '0600'
  when: nsx_client_key_content is defined

- name: Get node transport node ID from NSX
  ansible.builtin.shell: |
    unset http_proxy https_proxy HTTP_PROXY HTTPS_PROXY
    curl -u '{{ nsx_username }}:{{ nsx_password }}' \
      'https://{{ nsx_manager_host }}/api/v1/transport-nodes' \
      -k -s -H "Content-Type: application/json"
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTP_PROXY: ""
    HTTPS_PROXY: ""
    no_proxy: "*"
    NO_PROXY: "*"
  register: transport_nodes
  delegate_to: "{{ groups['masters'][0] }}"
  remote_user: "chait"
  run_once: true
  when: nsx_auto_tag_ports | default(true)

- name: Get node transport node ID from NSX using session
  ansible.builtin.shell: |
    unset http_proxy https_proxy HTTP_PROXY HTTPS_PROXY
    curl -u '{{ nsx_username }}:{{ nsx_password }}' \
      'https://{{ nsx_manager_host }}/api/v1/transport-nodes' \
      -k -s -H "Content-Type: application/json"
  environment:
    http_proxy: ""
    https_proxy: ""
  register: transport_nodes
  delegate_to: "{{ groups['masters'][0] }}"
  remote_user: "chait"
  run_once: true
  when: nsx_auto_tag_ports | default(true)

- name: Find current node transport node ID
  ansible.builtin.set_fact:
    node_transport_id: "{{ item.id }}"
  loop: "{{ transport_nodes.json.results | default([]) }}"
  when:
    - transport_nodes.json is defined
    - item.display_name == inventory_hostname or
      (item.node_deployment_info is defined and
       item.node_deployment_info.ip_addresses is defined and
       item.node_deployment_info.ip_addresses | length > 0 and
       ansible_default_ipv4.address in item.node_deployment_info.ip_addresses)
  loop_control:
    label: "{{ item.display_name | default('unknown') }}"

- name: Debug transport node discovery
  ansible.builtin.debug:
    msg: "Found transport node ID: {{ node_transport_id | default('not found') }} for {{ inventory_hostname }}"
  when: nsx_debug | default(false)

- name: Get logical ports for node tagging
  ansible.builtin.uri:
    url: "https://{{ nsx_manager_host }}/api/v1/logical-ports?parent_vif_id={{ node_transport_id }}"
    method: GET
    headers:
      Content-Type: "application/json"
    user: "{{ nsx_username }}"
    password: "{{ nsx_password }}"
    validate_certs: "{{ nsx_validate_certs | default(false) }}"
    return_content: true
  register: logical_ports
  delegate_to: "{{ groups['masters'][0] }}"
  remote_user: "chait"
  when:
    - node_transport_id is defined
    - nsx_auto_tag_ports | default(true)

- name: Tag NSX logical ports for container networking
  ansible.builtin.uri:
    url: "https://{{ nsx_manager_host }}/api/v1/logical-ports/{{ item.id }}"
    method: PUT
    headers:
      Content-Type: "application/json"
    body_format: json
    body:
      id: "{{ item.id }}"
      display_name: "{{ item.display_name }}"
      logical_switch_id: "{{ item.logical_switch_id }}"
      admin_state: "{{ item.admin_state | default('UP') }}"
      tags: "{{ item.tags | default([]) + nsx_node_tags }}"
    user: "{{ nsx_username }}"
    password: "{{ nsx_password }}"
    validate_certs: "{{ nsx_validate_certs | default(false) }}"
  vars:
    nsx_node_tags:
      - scope: "ncp/node_name"
        tag: "{{ inventory_hostname }}"
      - scope: "ncp/cluster"
        tag: "{{ nsx_cluster_name }}"
      - scope: "ncp/project"
        tag: "{{ nsx_project_name | default('default') }}"
  loop: "{{ logical_ports.json.results | default([]) }}"
  loop_control:
    label: "{{ item.display_name | default(item.id) }}"
  delegate_to: "{{ groups['masters'][0] }}"
  remote_user: "chait"
  when:
    - node_transport_id is defined
    - logical_ports.json is defined
    - logical_ports.json.results is defined
    - nsx_auto_tag_ports | default(true)

- name: Configure firewall for NSX components
  ansible.posix.firewalld:
    port: "{{ item }}"
    permanent: true
    state: enabled
    immediate: true
  loop:
    - "1234/tcp"  # NSX node agent
    - "1235/tcp"  # NSX node agent metrics
  when: ansible_os_family == "RedHat"
  failed_when: false  # Ignore if firewalld is not running

- name: Install required Python modules for NSX
  ansible.builtin.apt:
    name:
      - python3-yaml
      - python3-requests
      - python3-urllib3
    state: present
  when: nsx_install_python_deps | default(true)
