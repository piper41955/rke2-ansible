---
- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install prerequisites
  apt:
    name:
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present

- name: Download Docker's official GPG key
  get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: '0644'

- name: Add Docker repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present

- name: Update apt cache after adding repository
  apt:
    update_cache: yes

- name: Install containerd
  apt:
    name: containerd.io
    state: present

- name: Create containerd configuration directory
  file:
      path: "/etc/containerd"
      state: directory
      mode: '0755'

- name: Generate default containerd configuration
  shell: containerd config default > /etc/containerd/config.toml
  args:
    creates: /etc/containerd/config.toml

- name: Configure containerd to use systemd cgroup driver
  lineinfile:
    path: /etc/containerd/config.toml
    regexp: '^\s*SystemdCgroup\s*='
    line: '            SystemdCgroup = true'
    insertafter: '.*\[plugins\."io\.containerd\.grpc\.v1\.cri"\.containerd\.runtimes\.runc\.options\]'


- name: Configure containerd for RKE2 (optional)
  block:
    - name: Ensure containerd uses correct socket path for RKE2
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*address\s*='
        line: '  address = "/run/k3s/containerd/containerd.sock"'
        insertafter: '^\[grpc\]'
      become: yes
      register: configure_for_rke2_changed
      notify: restart containerd

- name: Create containerd socket directory
  file:
    path: /run/k3s/containerd
    state: directory
    mode: '0755'
  become: yes
  when: configure_for_rke2 | default(false)

- name: Start and enable containerd service
  systemd:
    name: containerd
    state: started
    enabled: yes
    daemon_reload: yes

- name: Verify containerd is running
  command: systemctl is-active containerd
  register: containerd_status
  changed_when: false

- name: Display containerd status
  debug:
    msg: "Containerd service status: {{ containerd_status.stdout }}"